/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi

ULTIMA MOD:
JAVIER SERRANO RODRIGUEZ - 202023012..

 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = true;
	
}
   

PARSER_BEGIN(Robot)
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;

import java.util.HashMap;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")

public class Robot
{
  public static void main(String args []) throws ParseException
  {
    Robot parser = new Robot(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like");
      try
      {
        switch (Robot.one_line())
        {
          case 0 : 
          System.out.println("OK.");
          break;
          default : 
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Robot.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(Robot)

SKIP:
{
	" "
	|"\r"
	|"\t"
	| "\n"
}

TOKEN: /* Nombres de Comandos */
{
		<WALK:  "walk">
		| < LEND: ";"> 
		| < OPEN : "PROG">
		| < CLOSE : "GORP">
		| < OPROGRAM: "PROC">
		| < CPROGRAM: "CORP">
		| < VAR: "VAR">
		| < BRACKETO: "(">
		| < BRACKETC: ")">
		| < CURBRACKETO: "{">
		| < CURBRACKETC: "}">
		| < COMMA: ",">
		| < IF: "if">
		| < FI: "fi">
		| < DO: "do">
		| < OD: "od">
		| < ELSE: "else">
		| < WHILE: "while">
		| < REPEAT: "repeat">	
		| < MOV: "mov">
		| < HOP: "hop">
		| < GO: "go">
		| < PUT: "put">
		| < PICK: "pick">
	    | < POP: "pop">
	    | < JUMP : "jump" >
		| < DROP : "drop">
		| < GRAB : "grab">
		| < GET : "get">
		| < FREE : "free">
		| < LOOK : "veer">
		| < VEER : "look">
		| < FRONT: "front" >
		| < RIGHT:"right">
		| < LEFT: "left">
		| < BACK : "back" >
		| < NORTH : "north" >
		| < WEST : "west">
		| < EAST : "east">
		| < SOUTH : "south">
		| < JUMPTO : "jumpTo">
		| < ISFACING : "isfacing">
		| < ISVALID : "isValid">  
		| < CANWALK : "canWalk">
		| < NOT :"not">
}

TOKEN:
{
		<BALLOONS:  "BALLOONS" >
		|<CHIPS:     "CHIPS"  >	

}



TOKEN :
{
		<NUM: (<DIGIT>)+ >
		| < NAME: (< LM >| < Lm> )(< LM >| < Lm>| < DIGIT>)*>
		| <#DIGIT: ["0"-"9"] >
		| < #LM: ["A"-"Z"]>
		| < #Lm: ["a"-"z"]>
        
}


	int one_line():
	{	
		HashMap GL = new HashMap();	
	}
	{
	  < OPEN> (Bloque(GL))? < CLOSE>
{
	   return 0;
	}
	 }
	 
	void Bloque(HashMap S):
	{}
	{
	  (Variable(S))*
	   (Programa(S))+
	  (Instruccion(S)|command())?
	}

	void Variable(HashMap S):
	{}
	{
	  < VAR > < NAME > (< COMMA> < NAME>)* < LEND>  
	}

	void Programa(HashMap GL):
	{}
	{
		< OPROGRAM >< NAME > < BRACKETO > (< NAME >(< COMMA >< NAME >)*)? < BRACKETC >< CURBRACKETO > BloqueP(GL)< CURBRACKETC >< CPROGRAM >
	}

	void BloqueP(HashMap GL):
	{
		HashMap LS = new HashMap();
	}
	{
		Instruccion(LS)
	}
	
	void AVariable(HashMap LS):
	{}
	{
		< NAME > "=" (< NAME > | < NUM >) < LEND >
	}
	void Instruccion(HashMap S):
	{ }
	{
		(Expresion(S) | (Ciclo(S))+ | (Condicional (S))+)
	}
	void Expresion(HashMap S):
	{ }
	{
	  (Unitario(S)|Binario(S)) (< LEND > (Unitario(S)|Binario(S)))*
	}
	
	void Ciclo(HashMap S):
	{ }
	{
		< WHILE > "(" condicion() ")" < DO > "{"(Instruccion(S))? "}"< OD >
	}
	void Condicional(HashMap S):
	{ }
	{
		< IF > "(" condicion() ")"  "{"(Instruccion(S))? "}" < FI >	
	}
	void Unitario(HashMap GL):
	{}
	{
		( ExpNum() | ExpDir(GL) | ExpOr(GL))
	}
	void condicion():
	{ }
	{
		< ISFACING > "("orientacion()")"
		| < ISVALID > "(" ExpNum() "," (< NUM >|< NAME >)")" 
		| < CANWALK > "(" (orientacion()|direccion()) "," (< NUM >|< NAME >) ")"
		| < NOT > "(" condicion()")"
	}
	void ExpNum():
	{}
	{
		( < WALK > "("  (< NUM >|< NAME >) ")" { }
		| < JUMP > "("  (< NUM >|< NAME >) ")" { }
		| < DROP > "("  (< NUM >|< NAME >) ")" { }
		| < GRAB > "("  (< NUM >|< NAME >) ")" { }
		| < GET > "("  (< NUM >|< NAME >) ")" { }
		| < FREE > "("  (< NUM >|< NAME >) ")" { }
		| < POP > "("  (< NUM >|< NAME >) ")" { } 
		)
	}
	void ExpDir(HashMap GL):
	{}
	{
		( < LOOK > direccion()
		)
	}
	void ExpOr(HashMap GL):
	{}
	{
		( < VEER > orientacion()
		)
	}
	void Binario(HashMap GL):
	{}
	{
	( < JUMPTO > "("  < NUM >"," < NUM > ")"
	|< WALK > "(" (direccion()| orientacion())"," <NUM > ")"
	)
	}
	void direccion():
	{}
	{
		< FRONT >
		| < RIGHT >
		| < LEFT >
		| < BACK >
	}
	void orientacion():
	{}
	{
		< NORTH >
		| < WEST >
		| < EAST >
		| < SOUTH >
	}
	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command():
	{	
		
		int x,y;
		String salida=new String();	
	}

	
	{
		(
		  (
		   <RIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";}
		| 	<MOV>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		| 	<HOP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
		| 	<GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}  
		|  <PUT> "("  put() ")"					  			
		|  <PICK> "(" get()  ")"	
	    |  < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
		) ";" 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			System.out.println(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}

	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}
	
	