/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;

import java.util.hasmap; 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|"\r"
	|"\t"
	| "\n"
}

TOKEN: /* Nombres de Comandos */
{
		<WALK:  "walk">
		| < LEND: ";"> 
		| < OPEN : "PROG">
		| < CLOSE : "GROP">
		| < OPROGRAM: "PROC">
		| < CPROGRAM: "CROP">
		| < VAR: "VAR">
		| < BRACKETO: "(">
		| < BRACKETC: ")">
		| < CURBRACKETO: "{">
		| < CURBRACKETC: "}">
		| < COMMA: ",">
		| < IF: "if">
		| < FI: "fi">
		| < DO: "do">
		| < OD: "od">
		| < ELSE: "else">
		| < WHILE: "while">
		| < REPEAT: "repeat">
}

TOKEN:
{
		<BALLOONS:  "BALLOONS" >
		|<CHIPS:     "CHIPS"  >	

}



TOKEN :
{
		<NUM: (<DIGIT>)+ >
		| < NAME: (< LM >| < Lm> )(< LM >| < Lm>| < DIGIT>)*>
		| <#DIGIT: ["0"-"9"] >
		| < #LM: ["A"-"Z"]>
		| < #Lm: ["a"-"z"]>
        
}


	boolean One_line(Console sistema):
	{	
		GL= new HasMap();	
	}
	{
	  < OPEN> Bloque(GL) < CLOSE>
	 }

	void Bloque(HasMap S):
	{}
	{
	  ( Variable(S)|Programa(S)|Intruccion(S)|Expression(S))*
	}

	void Variable(HasMap S):
	{}
	{
	  < VAR >< NAME > (< COMMA>< NAME>)* < LEND>  
	}

	void Instruccion(HasMap S):
	{}
	{
	  (Ciclo(S)|Comando(S)) < LEND>
	}

	void Programa(HasMap GL):
	{}
	{
	 < OPROGRAM >< NAME >< BRACKETO >< NAME >(< COMMA >< NAME >)*< BRACKETC >< CURBRACKETO > BloqueP(GL)< CURBRACKETC >< CPROGRAM >
	}

	void BloqueP(HasMap GL):
	{
		LS= new HasMap();
	 }
	 {
	   (	     (Variable(LS)|Instrucction(LS)|Expresion(LS)) < LEND>
	    )*
	 }

	void Comando(HasMap S):
	{ }
	{
	  (
	    Unitario(S)|Binario(S)	  )
	}
	
	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		
		int x,y;
		salida=new String();	
	}

	
	{
		(
		  (
		   <RIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";}
		| 	<MOV>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		| 	<HOP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
		| 	<GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}  
		|  <PUT> "("  put() ")"					  			
		|  <PICK> "(" get()  ")"	
	    |  < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
		) ";" 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}

	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}
	